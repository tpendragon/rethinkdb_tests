#!/usr/bin/env ruby
require 'rethinkdb'
require 'pry-byebug'
require 'benchmark'
include RethinkDB::Shortcuts

def connection
  @connection ||= r.connect(host: "localhost", port: 28015)
end

def setup_database
  begin
    r.db_create("tests").run(connection)
  rescue RethinkDB::RqlRuntimeError => err
    puts "Database `tests` already exists."
  end
  begin
    r.db("tests").table_create("resources").run(connection)
    r.db("tests").table('resources').index_create('pcdm:hasMember', multi: true).run(connection)
    r.db("tests").table('resources').index_create('@type', multi: true).run(connection)
  rescue RethinkDB::RqlRuntimeError => err
    puts "Table `resources` already exists."
  end
end

def context
  {
    "dc" => "http://purl.org/dc/terms/",
    "pcdm" => "http://pcdm.org/models#"
  }
end

def collection_node
  {
    "@context": context,
    "@type": ["pcdm:Collection"],
    "dc:title": "Collection"
  }
end

def member_node(title)
  {
    "@context": context,
    "@type": ["pcdm:Object"],
    "dc:title": title
  }
end

setup_database
members_to_create = 10000
collections_to_create = 500
collection_ids = nil
create_collection = Benchmark.measure("Create Collection") do
  result = r.db("tests").table('resources').insert(
    collections_to_create.times.map{|x| collection_node}
  ).run(connection)
  collection_ids = result["generated_keys"]
end
member_ids = nil
create_members = Benchmark.measure("Create Members") do
  members = members_to_create.times.map do |member_number|
    member_node("Member ##{member_number}")
  end
  result = r.db("tests").table("resources").insert(members).run(connection)
  member_ids = result["generated_keys"]
end
associate_members = Benchmark.measure("Associate Members") do
  collection_ids.each do |id|
    r.db("tests").table("resources").get(id).update("pcdm:hasMember" => member_ids.sample(1000)).run(connection)
  end
end
member_ids_retrieved = nil
get_collection = Benchmark.measure("Get Collection") do
  result = r.db("tests").table("resources").get(collection_ids.first).run(connection)
  member_ids_retrieved = result["pcdm:hasMember"]
  puts member_ids_retrieved.length
end
update_collection_title = Benchmark.measure("Update Collection Title") do
  r.db("tests").table("resources").get(collection_ids.first).update("dc:title" => "Banana").run(connection)
end

query_collections = Benchmark.measure("Query collections") do
  collections = r.db("tests").table("resources").get_all(member_ids.first, {index: "pcdm:hasMember"}).run(connection)
  collections = collections.to_a
  puts "Found #{collections.length} collections which collect #{member_ids.first}"
end
puts "Time to create collection:"
puts create_collection
puts "Time to create #{members_to_create} members:"
puts create_members
puts "Time to associate members to collection:"
puts associate_members
puts "Time to get collection:"
puts get_collection
puts "Time to update collection title:"
puts update_collection_title
puts "Time to get how many collections collect the first member:"
puts query_collections
